webpackJsonp([950383909335979e4],{"./node_modules/json-loader/index.js!./.cache/json/symfony-expression-language.json":function(e,n){e.exports={data:{markdownRemark:{ast:'{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Grâce à notre bundle ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":22,"offset":22},"indent":[]}},{"type":"link","title":null,"url":"http://github.com/M6Web/MonologExtraBundle","children":[{"type":"text","value":"MonologExtra","position":{"start":{"line":2,"column":23,"offset":23},"end":{"line":2,"column":35,"offset":35},"indent":[]}}],"position":{"start":{"line":2,"column":22,"offset":22},"end":{"line":2,"column":80,"offset":80},"indent":[]}},{"type":"text","value":", nous avons la possibilité d\'inclure des informations statiques dans le contexte de nos logs.\\nNous souhaiterions maintenant avoir aussi d\'autres informations plus dynamiques comme le nom de l\'utilisateur.","position":{"start":{"line":2,"column":80,"offset":80},"end":{"line":3,"column":111,"offset":285},"indent":[1]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":111,"offset":285},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Pour cela, nous avons donc ajouté la possibilité de configurer une expression qui sera évaluée par le composant ","position":{"start":{"line":5,"column":1,"offset":287},"end":{"line":5,"column":113,"offset":399},"indent":[]}},{"type":"link","title":null,"url":"http://symfony.com/doc/current/components/expression_language/index.html","children":[{"type":"text","value":"ExpressionLanguage","position":{"start":{"line":5,"column":114,"offset":400},"end":{"line":5,"column":132,"offset":418},"indent":[]}}],"position":{"start":{"line":5,"column":113,"offset":399},"end":{"line":5,"column":207,"offset":493},"indent":[]}},{"type":"text","value":" de Symfony de cette manière :","position":{"start":{"line":5,"column":207,"offset":493},"end":{"line":5,"column":237,"offset":523},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":287},"end":{"line":5,"column":237,"offset":523},"indent":[]}},{"type":"code","lang":"yaml","value":"m6_web_monolog_extra:\\n    processors:\\n        userProcessor:\\n            type: ContextInformation\\n            config:\\n                env: expr(container.getParameter(\'kernel.environment\'))\\n                user: expr(container.get(\'security.context\').getToken() ? container.get(\'security.context\').getToken().getUser().getUsername() : \'anonymous\')","position":{"start":{"line":7,"column":1,"offset":525},"end":{"line":15,"column":4,"offset":884},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Pour interpréter cette expression, nous avons injecté dans notre processeur Monolog une instance de ","position":{"start":{"line":17,"column":1,"offset":886},"end":{"line":17,"column":101,"offset":986},"indent":[]}},{"type":"inlineCode","value":"ExpressionLanguage","position":{"start":{"line":17,"column":101,"offset":986},"end":{"line":17,"column":121,"offset":1006},"indent":[]}},{"type":"text","value":" ainsi que le ","position":{"start":{"line":17,"column":121,"offset":1006},"end":{"line":17,"column":135,"offset":1020},"indent":[]}},{"type":"inlineCode","value":"container","position":{"start":{"line":17,"column":135,"offset":1020},"end":{"line":17,"column":146,"offset":1031},"indent":[]}},{"type":"text","value":" :","position":{"start":{"line":17,"column":146,"offset":1031},"end":{"line":17,"column":148,"offset":1033},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":886},"end":{"line":17,"column":148,"offset":1033},"indent":[]}},{"type":"code","lang":"yaml","value":"services:\\n  m6_web_monolog_extra.expression_language:\\n    class: Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage\\n    public: false\\n  m6_web_monolog_extra.processor.contextInformation:\\n    abstract: true\\n    class: M6Web\\\\Bundle\\\\MonologExtraBundle\\\\Processor\\\\ContextInformationProcessor\\n    arguments:\\n      - @service_container\\n      - @m6_web_monolog_extra.expression_language\\n    calls:\\n      - [ setConfiguration, []]","position":{"start":{"line":19,"column":1,"offset":1035},"end":{"line":32,"column":4,"offset":1473},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Nous utilisons une définition de service abstraite qui sert de modèle pour les services qui sont générés à partir de la ","position":{"start":{"line":34,"column":1,"offset":1475},"end":{"line":34,"column":121,"offset":1595},"indent":[]}},{"type":"link","title":null,"url":"http://symfony.com/fr/doc/current/cookbook/bundles/extension.html","children":[{"type":"text","value":"configuration sémantique","position":{"start":{"line":34,"column":122,"offset":1596},"end":{"line":34,"column":146,"offset":1620},"indent":[]}}],"position":{"start":{"line":34,"column":121,"offset":1595},"end":{"line":34,"column":214,"offset":1688},"indent":[]}},{"type":"text","value":" gérée par l\'extension du bundle :","position":{"start":{"line":34,"column":214,"offset":1688},"end":{"line":34,"column":248,"offset":1722},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1475},"end":{"line":34,"column":248,"offset":1722},"indent":[]}},{"type":"code","lang":"php","value":"<?php\\nforeach ($config[\'processors\'] as $name => $processor) {\\n    $serviceId = sprintf(\'%s.processor.%s\', $alias, is_int($name) ? uniqid() : $name);\\n\\n    $definition = clone $container->getDefinition(sprintf(\'%s.processor.%s\', $alias, $processor[\'type\']));\\n    $definition->setAbstract(false);\\n\\n    $tagOptions = [];\\n    if (array_key_exists(\'channel\', $processor)) {\\n        $tagOptions[\'channel\'] = $processor[\'channel\'];\\n    }\\n    if (array_key_exists(\'handler\', $processor)) {\\n        $tagOptions[\'handler\'] = $processor[\'handler\'];\\n    }\\n    $definition->addtag(\'monolog.processor\', $tagOptions);\\n\\n    if (array_key_exists(\'config\', $processor)) {\\n        if ($definition->hasMethodCall(\'setConfiguration\')) {\\n            $definition->removeMethodCall(\'setConfiguration\');\\n            $definition->addMethodCall(\'setConfiguration\', [$processor[\'config\']]);\\n        } else {\\n            throw new InvalidConfigurationException(sprintf(\'\\"%s\\" processor is not configurable.\', $processor[\'type\']));\\n        }\\n    }\\n\\n    $container->setDefinition($serviceId, $definition);\\n}","position":{"start":{"line":36,"column":1,"offset":1724},"end":{"line":64,"column":4,"offset":2810},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Et l\'expression est finalement évaluée par le processeur en utilisant le composant quand la valeur est de la forme ","position":{"start":{"line":66,"column":1,"offset":2812},"end":{"line":66,"column":116,"offset":2927},"indent":[]}},{"type":"inlineCode","value":"expr(...)","position":{"start":{"line":66,"column":116,"offset":2927},"end":{"line":66,"column":127,"offset":2938},"indent":[]}},{"type":"text","value":", ceci permettant de garder une compatibilité ascendante avec les configurations statiques précédentes.","position":{"start":{"line":66,"column":127,"offset":2938},"end":{"line":66,"column":230,"offset":3041},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2812},"end":{"line":66,"column":230,"offset":3041},"indent":[]}},{"type":"code","lang":"php","value":"<?php \\nprotected function evaluateValue($value)\\n{\\n    if (preg_match(\'/^expr\\\\((.*)\\\\)$/\', $value, $matches)) {\\n        return $this->expressionLanguage->evaluate($matches[1], [\'container\' => $this->container]);\\n    }\\n    return $value;\\n}","position":{"start":{"line":68,"column":1,"offset":3043},"end":{"line":77,"column":4,"offset":3290},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Avec la configuration présentée au début, nous récupérons ainsi l\'environnement et l\'utilisateur connecté dans le contexte de nos logs.","position":{"start":{"line":79,"column":1,"offset":3292},"end":{"line":79,"column":136,"offset":3427},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":3292},"end":{"line":79,"column":136,"offset":3427},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/M6Web/MonologExtraBundle","children":[{"type":"text","value":"MonologExtraBundle","position":{"start":{"line":81,"column":2,"offset":3430},"end":{"line":81,"column":20,"offset":3448},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3429},"end":{"line":81,"column":66,"offset":3494},"indent":[]}},{"type":"text","value":" est disponible en ","position":{"start":{"line":81,"column":66,"offset":3494},"end":{"line":81,"column":85,"offset":3513},"indent":[]}},{"type":"link","title":null,"url":"http://tom.preston-werner.com/2011/11/22/open-source-everything.html","children":[{"type":"text","value":"open-source","position":{"start":{"line":81,"column":86,"offset":3514},"end":{"line":81,"column":97,"offset":3525},"indent":[]}}],"position":{"start":{"line":81,"column":85,"offset":3513},"end":{"line":81,"column":168,"offset":3596},"indent":[]}},{"type":"text","value":" sur le ","position":{"start":{"line":81,"column":168,"offset":3596},"end":{"line":81,"column":176,"offset":3604},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/M6Web","children":[{"type":"text","value":"compte GitHub de M6Web","position":{"start":{"line":81,"column":177,"offset":3605},"end":{"line":81,"column":199,"offset":3627},"indent":[]}}],"position":{"start":{"line":81,"column":176,"offset":3604},"end":{"line":81,"column":226,"offset":3654},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":81,"column":226,"offset":3654},"end":{"line":81,"column":227,"offset":3655},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3429},"end":{"line":81,"column":227,"offset":3655},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":82,"column":1,"offset":3656}}}',frontmatter:{date:"November 16, 2014",path:"/symfony-expression-language",title:"Configuration dynamique avec Symfony ExpressionLanguage",image:{childImageSharp:{resize:{src:"/static/c64b4acbc0e3145752653de41274da4b-338bd.jpg"}}}}}},pathContext:{}}}});
//# sourceMappingURL=path---symfony-expression-language-b1ee7cccc749bc4a0d63.js.map